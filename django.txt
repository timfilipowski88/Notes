** Big Picture

    Objectives
1. Learn about MVC
2. Understand the benefits of an MVC/MTV framework
3. Our strategy for covering Django
4. Create a virtual environment for our Django projects

Seperating Concerns
    Django is a Web-Development framework, design to handle large scale applications - and in service of handling potentially large projects, we will be separating our code into files with very specific purposes. Django will separate out into separate files:
        Routes (expected requests)
        Functions associated with those routes (how our server responds)
        Database interaction (storing, retrieving data from database)
        Templates (what the user interacts with)
    Django further divides an application into individual apps that work together as part of one whole project.

MTV (or MVC)
    One of the most popular patterns for organizing code is one known as MVC: Model-View-Controller. Django's pattern, MTV: Model-Template-View, is very similar. Here's a basic breakdown of responsibilities:
    Model           Model           May build database tables
                                    Handles logic that relies on data
                                    Interfaces with the database
    Template        View            HTML page that gets served to the client
                                    May contain some logic to be handled by a template engine
    View            Controller      Recieves incoming requests
                                    Minimal logic
                                    Calls on models to aggregate/process data
                                    Determines appropriate response 




** Creating a Django Project

    Objectives
1. Create a virtual environment for all Django projects
2. Practice the steps for creating a Django project with a single app 

1. Create a virtual environment for all Django projects
    From the my_environments folder add a the virtual enviroment with:
        python -m venv djangoPy3Env
    Then activate the environment:
        call djangoPy3Env\scripts\activate
    To install Django, activate your environment, then use your package manager:
        pip install Django==2.2

2. Practice the steps for creating a Django project with a single app 
    Remember that a single application in Django(in our case, every assignment) is called a project, which contains one or more apps. 
    1. With our Django virtual environment activated, create a new Django project. First navigage to where you want the projecct to be saved(for these first few assignments, that will be the python_stack/django/django_intro folder). Then run this command, specifying a project name of our choosing:
        >cd python_stack/django/django_intro
        django_intro> django-admin startproject your_project_name_here
    To test it out, Navigate into the folder that was just created. A new Django project has just been created--let's run it! 
        django_intro> cd your_project_name_here
        your_project_name_here> python manage.py runserver
    Go to localhost:8000.. Hooray for CLIs (command-line interfaces)!
    Type ctrl+c to stop the server. 
    2. For every app we want to add to our project, we'll do the following:
        your_project_name_here> python manage.py startapp your_app_name_here
    The apps in a project cannot have the same name as the project.
    In the text editor, find the settings.py file. It should be in a folder with the same name as our project. Find the variable INSTALLED_APPS, and let's add our newly created app: 

        your_project_name_here/your_app_name_here/settings.py
        INSTALLED_APPS = [
            'your_app_name_here', # added this line. Don't forget the comma!!
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
        ]    # the trailing comma after the last item in a list, tuple, or dictionary is commonly accepted in Python   

    For these next few steps, we are creating the route "/" to be associated with a specific function. In the urls.py file, add a URL pattern for your new app. (You can delete the current admin pattern, or just ignore it for now). You will need to add an import for your views file.

        your_project_name_here/your_project_name_here/urls.py
        from django.urls import path, include               # import include
        # from django.contrib import admin                  # comment out or just delete
        urlspatterns = [
            path('', include('your_app_name_here.urls')),
            # path('admin/', admin.sites.urls)              # comment out or just delete
        ]

    Next, let's create a new urls.py file in the your_app_name_here folder. Put the following:

        your_project_name_here/your_app_name_here/urls.py 
        from django.urls import path
        from . import views
        urlpatterns = [
            path('', views.index),
        ]

        And then actually put a function called index in our app's views.py file:
            your_project_name_here/your_app_name_here/views.py
            from django.shortcuts import render, HttpResponse
            def index(request):
                return HttpResponse("This is my response")



** Django Routing
    Objectives
1. Understand how routes are divided between project and app level urls.py files
2. Understand how requests are resolved from the urls.py files to the views.py file

1. Understand how routes are divided between project and app level urls.py files
    We have a new Django project running, but what was all that code we added there at the end?

        project_name/project_name/urls.py
        from django.urls import path, include

        urlpatterns = [
            path('', include('your_app_name_here.urls)),
        ]

    The urlpatterns is simply a variable that holds a list of urls that this project recognizes. Notice there are 2 arguments being passed to the url function: 
        1. a raw string representing a route pattern (in our example: '')
        2. what to do if the pattern matches(in our example: include('app_name.urls') )

    project_name/app_name/urls.py
    from django.urls import path 
    from . import views        # the . indicates that the views file can be found in the same directory as this file

    urlpatterns = [
        path('', views.index)
    ]

    This is the same url function, but this time our arguments indicate that;
        1. '' - the rest of the route both starts and ends with nothing (i.e. "/" is the full route), and
        2. views.index  - if the requested route matches this pattern, then the function with the name "index" from this app's views.py file will be invoked

    If the route wants a views.index function, then we'd better have one:
        project_name/app_name/views.py
        from django.shortcuts import render, HttpResponse
        def index(request):
            return HttpRespone("I am ready to handle a request for '/'!")

    A couple of important things to notice here:
        1. Every function's first argument will be the request object.
        2. We don't distinguish in our routes anywhere between GET vs POST requests. This will be done within a given function. 
        3. If we are returning a string, we cannot simply return a string, but must send the string via HttpResponse (which must be imported. We'll be returning to that template again soon!)



** Routing w/ Parameters

    Objectives
1. Learn how to capture variables from the url

    There are occasions where the data passed through the url is handled as a parameter. When passing a parameter through the url, you must be explicit of type. 
    Here are a few examples, to demonstrate the syntax:

        some_project/some_app/urls.py
        urlpatterns = [
            path('bears', views.one_method),                   # would only match localhost:8000/bears
            path('bears/<int:my_val>', views.another_method)   # would match localhost:8000/bears/23
            path('bears/<str:name>/poke', views.yet_another),  # would match localhost:8000/bears/pooh/poke
            path('<int:id>/<str:color>', views.one_more),      # would match localhost:8000/17/brown
        ]

    If we are passing dynamic data through the url via a GET request, we neeed to write our corresponding functions to expect this data. The corresponding functions would then look like this:

        some_project/some_app/views.py
        def one_method(request):                # no values passed via URL
            pass                                
    
        def another_method(request, my_val):	# my_val would be a number from the URL
            pass                                # given the example above, my_val would be 23
            
        def yet_another(request, name):	        # name would be a string from the URL
            pass                                # given the example above, name would be 'pooh'
            
        def one_more(request, id, color): 	# id would be a number, and color a string from the URL
            pass                                # given the example above, id would be 17 and color would be 'brown'